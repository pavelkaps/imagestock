{"version":3,"sources":["repository/ImageRepository.es6"],"names":["ImageRepository","db","PouchDB","Rx","Observable","fromPromise","allDocs","include_docs","attachments","flatMap","data","forkJoin","rows","map","row","getAttachment","id","Object","keys","doc","_attachments","then","comments","image_likes","imageUrl","URL","createObjectURL","catch","err","console","log","image","put","get","_id","attachment","like","filter","_like","own","userId","comment","idImage","commentId","remove"],"mappings":"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","file":"ImageRepository.js","sourcesContent":["/**\r\n * Created by Паша on 10.03.2017.\r\n */\r\nexport class ImageRepository {\r\n    constructor() {\r\n        this.db = new PouchDB('imagesnew');\r\n    }\r\n\r\n    getAll() {\r\n        return Rx.Observable.fromPromise(this.db.allDocs({\r\n            include_docs: true,\r\n            attachments: false\r\n        }))\r\n        .flatMap(((data)=> {\r\n            return Rx.Observable.forkJoin((data.rows.map((row)=> {\r\n                return this.db.getAttachment(row.id, Object.keys(row.doc._attachments)[0])\r\n                .then((data)=> {\r\n                    return {\r\n                        id: row.id,\r\n                        comments: row.doc.comments,\r\n                        image_likes: row.doc.image_likes,\r\n                        imageUrl: URL.createObjectURL(data)\r\n                    }\r\n                });\r\n            }))).catch((err)=> {\r\n                console.log(err);\r\n            });\r\n        }))\r\n    }\r\n\r\n    put(image) {\r\n        return this.db.put(image).then((data)=> {\r\n            return this.db.get(data.id)\r\n        }).then((doc) => {\r\n            return this.db.getAttachment(doc._id, Object.keys(doc._attachments)[0])\r\n                .then(attachment => {\r\n                    return {\r\n                        id: doc._id,\r\n                        comments: doc.comments,\r\n                        image_likes: doc.image_likes,\r\n                        imageUrl: URL.createObjectURL(attachment)\r\n                    };\r\n                });\r\n        });\r\n    }\r\n\r\n    addLike(_id, like) {\r\n        return this.db.get(_id).then((doc) => {\r\n            let image = {...doc, image_likes: [...doc.image_likes.filter(_like => _like.own !== like.own), like]};\r\n            return this.db.put(image).then(res => image);\r\n        });\r\n    }\r\n\r\n    deleteLike(_id, userId) {\r\n        return this.db.get(_id).then((doc) => {\r\n            console.log(doc, \"doc\");\r\n            let image = {...doc, image_likes: doc.image_likes.filter(like => like.own !== userId)};\r\n            console.log(image, \"image\");\r\n            return this.db.put(image).then(res => image);\r\n\r\n        });\r\n    }\r\n\r\n    addComment(_id, comment) {\r\n        return this.db.get(_id).then((doc) => {\r\n            let image = {...doc, comments: [...doc.comments, comment]};\r\n            return this.db.put(image);\r\n        });\r\n    }\r\n\r\n    deleteComment(idImage, commentId) {\r\n        return this.db.get(idImage).then((doc) => {\r\n            let image = {...doc, comments: doc.comments.filter(comment => comment.id !== commentId)};\r\n            return this.db.put(image);\r\n        });\r\n    }\r\n\r\n    deleteImageById(_id) {\r\n        return this.db.get(_id).then((doc) => {\r\n            return this.db.remove(doc);\r\n        })\r\n    }\r\n}\r\n"]}