{"version":3,"sources":["repository/ImageRepository.es6"],"names":["HTTP","WeakMap","Q","ImageRepository","$http","$q","db","PouchDB","set","allDocs","include_docs","attachments","then","data","get","all","rows","map","row","getAttachment","id","Object","keys","doc","_attachments","comments","image_likes","imageUrl","URL","createObjectURL","image","defer","docId","put","_id","resolve","promise","like","deleteLikeFromDoc","own","push","userId","find","el","ind","arr","splice","comment","idImage","idComment","index","own_id","console","log","remove","getInstance","$inject"],"mappings":"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","file":"ImageRepository.js","sourcesContent":["/**\r\n * Created by Паша on 10.03.2017.\r\n */\r\nconst HTTP = new WeakMap();\r\nconst Q = new WeakMap();\r\n\r\nexport class ImageRepository {\r\n    constructor($http, $q) {\r\n        this.db = new PouchDB('imagesnew');\r\n        HTTP.set(this, $http);\r\n        Q.set(this, $q);\r\n    }\r\n\r\n    getAll() {\r\n        return this.db.allDocs({\r\n            include_docs: true,\r\n            attachments: false\r\n        }).then((data)=> {\r\n            return Q.get(this).all((data.rows.map((row)=> {\r\n                return this.db.getAttachment(row.id, Object.keys(row.doc._attachments)[0]).then((data)=> {\r\n                    return {\r\n                        id: row.id,\r\n                        comments: row.doc.comments,\r\n                        image_likes: row.doc.image_likes,\r\n                        imageUrl: URL.createObjectURL(data)\r\n                    }\r\n                });\r\n            })))\r\n        });\r\n    }\r\n\r\n    put(image) {\r\n        let defer = Q.get(this).defer();\r\n        let docId = null;\r\n        this.db.put(image).then((data)=> {\r\n            return this.db.get(data.id)\r\n        }).then((doc) => {\r\n            docId = doc;\r\n            return this.db.getAttachment(doc._id, Object.keys(doc._attachments)[0]);\r\n        }).then((data)=> {\r\n            defer.resolve({\r\n                id: docId._id,\r\n                comments: docId.comments,\r\n                image_likes: docId.image_likes,\r\n                imageUrl: URL.createObjectURL(data)\r\n            });\r\n        });\r\n        return defer.promise;\r\n    }\r\n\r\n    addLike(_id,  like) {\r\n        let defer = Q.get(this).defer();\r\n        this.db.get(_id).then((doc) => {\r\n            this.deleteLikeFromDoc(doc, like.own);\r\n            doc.image_likes.push(like);\r\n            this.db.put(doc).then((data)=> {\r\n                defer.resolve(doc.image_likes);\r\n            });\r\n\r\n        });\r\n        return defer.promise;\r\n    }\r\n\r\n    deleteLike(_id, userId) {\r\n        let defer = Q.get(this).defer();\r\n        this.db.get(_id).then((doc) => {\r\n            this.deleteLikeFromDoc(doc, userId);\r\n            defer.resolve(doc.image_likes);\r\n        });\r\n        return defer.promise;\r\n    }\r\n\r\n    deleteLikeFromDoc(doc, userId){\r\n        doc.image_likes.find((el, ind, arr)=> {\r\n            if (el.own ===  userId) {\r\n                doc.image_likes.splice(ind, 1);\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n\r\n    addComment(_id, comment) {\r\n        let defer = Q.get(this).defer();\r\n        this.db.get(_id).then((doc) => {\r\n            doc.comments.push(comment);\r\n            this.db.put(doc).then((data)=> {\r\n                defer.resolve(data)\r\n            });\r\n        });\r\n        return defer.promise;\r\n    }\r\n\r\n    deleteComment(idImage, idComment){\r\n        let defer = Q.get(this).defer();\r\n        this.db.get(idImage).then((doc) => {\r\n            doc.comments.find((el, index, arr)=>{\r\n                if(el.own_id === idComment){\r\n                    doc.comments.splice(index, 1);\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n            this.db.put(doc).then((data)=> {\r\n                defer.resolve(data)\r\n            });\r\n        });\r\n        return defer.promise;\r\n    }\r\n\r\n    getById(_id) {\r\n        this.db.get(_id).then((doc) => {\r\n            console.log(doc);\r\n        });\r\n    }\r\n\r\n    deleteImageById(_id) {\r\n        return this.db.get(_id).then((doc) => {\r\n            return this.db.remove(doc);\r\n        });\r\n    }\r\n\r\n    static getInstance($http, $q) {\r\n        return new ImageRepository($http, $q);\r\n    }\r\n}\r\n\r\nImageRepository.getInstance.$inject = ['$http', '$q'];"]}