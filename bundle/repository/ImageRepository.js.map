{"version":3,"sources":["repository/ImageRepository.es6"],"names":["ImageRepository","db","PouchDB","Rx","Observable","fromPromise","allDocs","include_docs","attachments","flatMap","data","forkJoin","rows","map","row","getAttachment","id","Object","keys","doc","_attachments","comments","image_likes","imageUrl","URL","createObjectURL","catch","err","console","log","image","put","get","_id","attachment","like","filter","_like","own","userId","comment","idImage","commentId","remove"],"mappings":"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","file":"ImageRepository.js","sourcesContent":["/**\r\n * Created by Паша on 10.03.2017.\r\n */\r\nexport class ImageRepository {\r\n    constructor() {\r\n        this.db = new PouchDB('imagesnew');\r\n    }\r\n\r\n    getAll() {\r\n        return Rx.Observable.fromPromise(this.db.allDocs({\r\n            include_docs: true,\r\n            attachments: false\r\n        }))\r\n        .flatMap(((data)=> {\r\n            return Rx.Observable.forkJoin((\r\n                data.rows.map((row)=> {\r\n                return Rx.Observable.fromPromise(this.db.getAttachment(row.id, Object.keys(row.doc._attachments)[0]))\r\n                .map((data)=> {\r\n                    return {\r\n                        id: row.id,\r\n                        comments: row.doc.comments,\r\n                        image_likes: row.doc.image_likes,\r\n                        imageUrl: URL.createObjectURL(data)\r\n                    }\r\n                });\r\n            })));\r\n        }))\r\n        .catch((err)=> {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    put(image) {\r\n        return Rx.Observable.fromPromise(this.db.put(image))\r\n        .flatMap((data)=> {\r\n            return Rx.Observable.fromPromise(this.db.get(data.id))\r\n        })\r\n        .flatMap((doc) => {\r\n            return Rx.Observable.fromPromise(this.db.getAttachment(doc._id, Object.keys(doc._attachments)[0]))\r\n                .map(attachment => {\r\n                    return {\r\n                        id: doc._id,\r\n                        comments: doc.comments,\r\n                        image_likes: doc.image_likes,\r\n                        imageUrl: URL.createObjectURL(attachment)\r\n                    };\r\n                });\r\n        });\r\n    }\r\n\r\n    addLike(_id, like) {\r\n        return Rx.Observable.fromPromise(this.db.get(_id))\r\n        .flatMap((doc) => {\r\n            let image = {...doc, image_likes: [...doc.image_likes.filter(_like => _like.own !== like.own), like]};\r\n            return Rx.Observable.fromPromise(this.db.put(image))\r\n                                .map(res => image);\r\n        });\r\n    }\r\n\r\n    deleteLike(_id, userId) {\r\n        return Rx.Observable.fromPromise(this.db.get(_id))\r\n        .flatMap((doc) => {\r\n            let image = {...doc, image_likes: doc.image_likes.filter(like => like.own !== userId)};\r\n            return Rx.Observable.fromPromise(this.db.put(image))\r\n                                .map(res => image);\r\n        });\r\n    }\r\n\r\n    addComment(_id, comment) {\r\n        return Rx.Observable.fromPromise(this.db.get(_id))\r\n        .flatMap((doc) => {\r\n            let image = {...doc, comments: [...doc.comments, comment]};\r\n            return Rx.Observable.fromPromise(this.db.put(image));\r\n        });\r\n    }\r\n\r\n    deleteComment(idImage, commentId) {\r\n        return Rx.Observable.fromPromise(this.db.get(idImage))\r\n        .flatMap((doc) => {\r\n            let image = {...doc, comments: doc.comments.filter(comment => comment.id !== commentId)};\r\n            return Rx.Observable.fromPromise(this.db.put(image));\r\n        });\r\n    }\r\n\r\n    deleteImageById(_id) {\r\n        return Rx.Observable.fromPromise(this.db.get(_id))\r\n        .flatMap((doc) => {\r\n            return Rx.Observable.fromPromise(this.db.remove(doc));\r\n        })\r\n    }\r\n}\r\n"]}