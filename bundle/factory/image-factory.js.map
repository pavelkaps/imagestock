{"version":3,"sources":["factory/image-factory.es6"],"names":["HTTP","WeakMap","Q","USER_ID","ImageService","$http","$q","db","PouchDB","imageApiURL","set","allDocs","include_docs","attachments","then","data","console","log","get","all","rows","map","row","getAttachment","id","Object","keys","doc","_attachments","comments","image_likes","imageUrl","URL","createObjectURL","image","defer","docId","put","_id","resolve","promise","like","deleteLikeFromDoc","own","push","userId","find","el","ind","arr","splice","comment","remove","bulkDocs","occupation","cuteness","getInstance","$inject"],"mappings":"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","file":"image-factory.js","sourcesContent":["const HTTP = new WeakMap();\r\nconst Q = new WeakMap();\r\n\r\nconst USER_ID = \"user\";\r\n\r\nclass ImageService {\r\n    constructor($http, $q) {\r\n        this.db = new PouchDB('imagesnew');\r\n        this.imageApiURL = \"./mock-data/images.json\";\r\n\r\n        HTTP.set(this, $http);\r\n        Q.set(this, $q);\r\n    }\r\n    getAll() {\r\n        //return HTTP.get(this).get(this.imageApiURL);\r\n        return this.db.allDocs({\r\n            include_docs: true,\r\n            attachments: false\r\n        }).then((data)=> {\r\n            console.log(data);\r\n            return Q.get(this).all((data.rows.map((row)=> {\r\n                return this.db.getAttachment(row.id, Object.keys(row.doc._attachments)[0]).then((data)=> {\r\n                    console.log(data);\r\n                    return {\r\n                        id: row.id,\r\n                        comments: row.doc.comments,\r\n                        image_likes: row.doc.image_likes,\r\n                        imageUrl: URL.createObjectURL(data)\r\n                    }\r\n                });\r\n            })))\r\n        });\r\n    }\r\n\r\n    put(image) {\r\n        let defer = Q.get(this).defer();\r\n        let docId = null;\r\n        this.db.put(image).then((data)=> {\r\n            return this.db.get(data.id)\r\n        }).then((doc) => {\r\n            docId = doc;\r\n            return this.db.getAttachment(doc._id, Object.keys(doc._attachments)[0]);\r\n        }).then((data)=> {\r\n            defer.resolve({\r\n                id: docId._id,\r\n                comments: docId.comments,\r\n                image_likes: docId.image_likes,\r\n                imageUrl: URL.createObjectURL(data)\r\n            });\r\n        });\r\n        return defer.promise;\r\n    }\r\n\r\n    addLike(_id,  like) {\r\n        let defer = Q.get(this).defer();\r\n        this.db.get(_id).then((doc) => {\r\n            this.deleteLikeFromDoc(doc, like.own);\r\n            doc.image_likes.push(like);\r\n            this.db.put(doc).then((data)=> {\r\n                defer.resolve(doc.image_likes);\r\n            });\r\n\r\n        });\r\n        return defer.promise;\r\n    }\r\n\r\n    deleteLike(_id, userId) {\r\n        let defer = Q.get(this).defer();\r\n        this.db.get(_id).then((doc) => {\r\n            this.deleteLikeFromDoc(doc, userId);\r\n            defer.resolve(doc.image_likes);\r\n        });\r\n        return defer.promise;\r\n    }\r\n\r\n    deleteLikeFromDoc(doc, userId){\r\n        doc.image_likes.find((el, ind, arr)=> {\r\n            if (el.own ===  userId) {\r\n                doc.image_likes.splice(ind, 1);\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n\r\n    addComment(_id, comment) {\r\n        let defer = Q.get(this).defer();\r\n        this.db.get(_id).then((doc) => {\r\n            doc.comments.push(comment);\r\n            this.db.put(doc).then((data)=> {\r\n                defer.resolve(data)\r\n            });\r\n        });\r\n        return defer.promise;\r\n    }\r\n\r\n    getById(_id) {\r\n        this.db.get(_id).then((doc) => {\r\n            console.log(doc);\r\n        });\r\n    }\r\n\r\n    deleteImageById(_id) {\r\n        return this.db.get(_id).then((doc) => {\r\n            return this.db.remove(doc);\r\n        });\r\n    }\r\n\r\n    defaultImage() {\r\n        this.db.bulkDocs([\r\n            {\r\n                _id: 'mittens',\r\n                occupation: 'kitten',\r\n                cuteness: 9.0\r\n            },\r\n            {\r\n                _id: 'katie',\r\n                occupation: 'kitten',\r\n                cuteness: 7.0\r\n            },\r\n            {\r\n                _id: 'felix',\r\n                occupation: 'kitten',\r\n                cuteness: 8.0\r\n            }\r\n        ]);\r\n    }\r\n\r\n    static getInstance($http, $q) {\r\n        return new ImageService($http, $q);\r\n    }\r\n}\r\n\r\nImageService\r\n    .getInstance\r\n    .$inject = ['$http', '$q'];\r\nexport {\r\n    ImageService\r\n}"]}